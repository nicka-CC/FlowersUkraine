// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgres://neondb_owner:npg_4p5RYihEZesm@ep-raspy-silence-a10u9qpl-pooler.ap-southeast-1.aws.neon.tech/neondb?sslmode=require"
  //url      = "postgresql://postgres:nikita12345@localhost:5432/flowersShop?schema=public"
}

model Address {
  id           Int    @id @default(autoincrement()) @map("_id")
  address      String
  date_created String
  date_updated String
  User         User?  @relation(fields: [userId], references: [id])
  userId       Int?
}

model Promocodes {
  id           Int    @id @default(autoincrement()) @map("_id")
  address      String
  date_expired String
  date_created String
  date_updated String
}

model User {
  id             Int        @id @default(autoincrement()) @map("_id")
  permission     Int        @default(0)
  email          String     @unique
  name           String?    @default("")
  surname        String?    @default("")
  phone          String     @unique
  cart           Cart[]
  history_orders Order[]
  password       String
  comments       comments[]
  address        Address[]
  face           String?
  date_created   String
  date_updated   String
}

model Cart {
  id            Int                         @id @default(autoincrement()) @map("_id")
  date          String
  status        String
  date_delivery String
  count_product Int
  product       CartandAndOrdersOnProduct[]
  date_updated  String
  User          User?                       @relation(fields: [userId], references: [id])
  userId        Int?
}

model CartandAndOrdersOnProduct {
  id Int @id @default(autoincrement()) @map("_id")

  date_created String
  date_updated String
  Cart         Cart?    @relation(fields: [cartId], references: [id])
  cartId       Int?
  Order        Order?   @relation(fields: [orderId], references: [id])
  orderId      Int?
  Product      Product? @relation(fields: [productId], references: [id])
  productId    Int?
}

model Shops {
  id           Int        @id @default(autoincrement()) @map("_id")
  locate       String
  name         String
  abount       String
  stats        Int
  comments     comments[]
  date_created String
  date_updated String
}

model Order {
  id            Int                         @id @default(autoincrement()) @map("_id")
  date          String
  status        String
  date_delivery String
  address       String
  total_service String
  count_product Int
  product       CartandAndOrdersOnProduct[]
  date_created  String
  date_updated  String
  User          User?                       @relation(fields: [userId], references: [id])
  userId        Int?
}

model Flowers {
  id            Int              @id @default(autoincrement()) @map("_id")
  name          String
  date_created  String
  date_updated  String
  flowerConnect FlowersProduct[]
}

model FlowersProduct {
  id           Int      @id @default(autoincrement()) @map("_id")
  name         String
  date_created String
  date_updated String
  Flowers      Flowers? @relation(fields: [flowersId], references: [id])
  flowersId    Int?
  Product      Product? @relation(fields: [productId], references: [id])
  productId    Int?
}

model ProductSize {
  id           Int    @id @default(autoincrement()) @map("_id")
  name         String
  size         Int
  date_created String
  date_updated String

  Product SizesProduct[]
}

model SizesProduct {
  id Int @id @default(autoincrement()) @map("_id")

  date_created  String
  date_updated  String
  ProductSize   ProductSize? @relation(fields: [productSizeId], references: [id])
  productSizeId Int?
  Product       Product?     @relation(fields: [productId], references: [id])
  productId     Int?
}

model Category {
  id           Int       @id @default(autoincrement()) @map("_id")
  name         String
  icon         String
  Product      Product[]
  date_created String
  date_updated String
}

model Product {
  id           Int                         @id @default(autoincrement()) @map("_id")
  image        String
  name         String
  color        String
  sizes        SizesProduct[]
  volume       String
  amount       Int
  flowers      FlowersProduct[]
  count        Int
  quantity     Int
  total_count  Int
  date_created String
  comments     comments[]
  date_updated String
  actions      CartandAndOrdersOnProduct[]

  Category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?
}

model comments {
  id           Int      @id @default(autoincrement()) @map("_id")
  name         String
  description  String
  image        String
  about        String
  date_created String
  date_updated String
  Shops        Shops?   @relation(fields: [shopsId], references: [id])
  shopsId      Int?
  User         User?    @relation(fields: [userId], references: [id])
  userId       Int?
  Product      Product? @relation(fields: [productId], references: [id])
  productId    Int?
}
